#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Hub supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "Hub"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  hub COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the podman binary."
    echo
    echo "${YELLOW}Podman Commands:${NC}"
    echo "  ${GREEN}hub up${NC}        Start the application"
    echo "  ${GREEN}hub up -d${NC}     Start the application in the background"
    echo "  ${GREEN}hub stop${NC}      Stop the application"
    echo "  ${GREEN}hub restart${NC}   Restart the application"
    echo "  ${GREEN}hub ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}Artisan Commands:${NC}"
    echo "  ${GREEN}hub artisan ...${NC}          Run an Artisan command"
    echo "  ${GREEN}hub artisan queue:work${NC}"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}hub php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}hub php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}hub composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}hub composer require laravel/sanctum${NC}"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}hub node ...${NC}         Run a Node command"
    echo "  ${GREEN}hub node --version${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}hub npm ...${NC}        Run a npm command"
    echo "  ${GREEN}hub npx${NC}            Run a npx command"
    echo "  ${GREEN}hub npm run prod${NC}"
    echo
    echo "${YELLOW}PNPM Commands:${NC}"
    echo "  ${GREEN}hub pnpm ...${NC}        Run a pnpm command"
    echo "  ${GREEN}hub pnpx${NC}            Run a pnpx command"
    echo "  ${GREEN}hub pnpm run prod${NC}"
    echo
    echo "${YELLOW}Yarn Commands:${NC}"
    echo "  ${GREEN}hub yarn ...${NC}        Run a Yarn command"
    echo "  ${GREEN}hub yarn run prod${NC}"
    echo
    echo "${YELLOW}Bun Commands:${NC}"
    echo "  ${GREEN}hub bun ...${NC}        Run a bun command"
    echo "  ${GREEN}hub bunx${NC}           Run a bunx command"
    echo "  ${GREEN}hub bun run prod${NC}"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}hub mysql${NC}     Start a MySQL CLI session within the 'mysql' container"
    echo "  ${GREEN}hub mariadb${NC}   Start a MySQL CLI session within the 'mariadb' container"
    echo "  ${GREEN}hub psql${NC}      Start a PostgreSQL CLI session within the 'pgsql' container"
    echo "  ${GREEN}hub redis${NC}     Start a Redis CLI session within the 'redis' container"
    echo
    echo "${YELLOW}Debugging:${NC}"
    echo "  ${GREEN}hub debug ...${NC}          Run an Artisan command in debug mode"
    echo "  ${GREEN}hub debug queue:work${NC}"
    echo
    echo "${YELLOW}Running Tests:${NC}"
    echo "  ${GREEN}hub test${NC}          Run the PHPUnit tests via the Artisan test command"
    echo "  ${GREEN}hub pest ...${NC}      Run Pest"
    echo "  ${GREEN}hub pint ...${NC}      Run Pint"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}hub shell${NC}        Start a shell session within the application container"
    echo "  ${GREEN}hub bash${NC}         Alias for 'hub shell'"
    echo "  ${GREEN}hub root-shell${NC}   Start a root shell session within the application container"
    echo "  ${GREEN}hub root-bash${NC}    Alias for 'hub root-shell'"
    echo "  ${GREEN}hub tinker${NC}       Start a new Laravel Tinker session"
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}hub bin ...${NC}   Run Composer binary scripts from the vendor/bin directory"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
# shellcheck source=/dev/null
if [ -n "$APP_ENV" ] && [ -f ./.env."$APP_ENV" ]; then
  source ./.env."$APP_ENV";
elif [ -f ./.env ]; then
  source ./.env;
fi

# Define environment variables...
export APP_PORT=${APP_PORT:-80}
export APP_SERVICE=${APP_SERVICE:-"systemd-hub-app"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${1000:-$UID}
export WWWGROUP=${1000:-$(id -g)}

# Function that outputs Hub is not running...
function hub_is_not_running {
    echo "${BOLD}Hub is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may Hub using the following commands:${NC} './vendor/bin/hub up' or './vendor/bin/hub up -d'" >&2

    exit 1
}

# Define Podman command prefix...
PODMAIN=(podman)

EXEC="yes"

if [ -z "$HUB_SKIP_CHECKS" ]; then
    # Ensure that Podman is running...
    if ! podman info > /dev/null 2>&1; then
        echo "${BOLD}Podman is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Hub is currently up...
    if "${PODMAIN[@]}" ps "$APP_SERVICE" 2>&1 | grep 'Exit\|exited'; then
        echo "${BOLD}Shutting down old Hub processes...${NC}" >&2

        "${PODMAIN[@]}" down > /dev/null 2>&1

        EXEC="no"
    elif [ -z "$("${PODMAIN[@]}" ps -q)" ]; then
        EXEC="no"
    fi
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "php" "$@")
    else
        hub_is_not_running
    fi

# Proxy vendor binary commands on the application container...
elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" ./vendor/bin/"$@")
    else
        hub_is_not_running
    fi

# Proxy podman commands to the podman binary on the application container...
elif [ "$1" == "podman" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "${PODMAIN[@]}")
    else
        hub_is_not_running
    fi

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" "composer" "$@")
    else
        hub_is_not_running
    fi

# Proxy Artisan commands to the "artisan" binary on the application container...
elif [ "$1" == "artisan" ] || [ "$1" == "art" ] || [ "$1" == "a" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan "$@")
    else
        hub_is_not_running
    fi

# Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
elif [ "$1" == "debug" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it -e XDEBUG_TRIGGER=1)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan "$@")
    else
        hub_is_not_running
    fi

# Proxy the "test" command to the "php artisan test" Artisan command...
elif [ "$1" == "test" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan test "$@")
    else
        hub_is_not_running
    fi

# Proxy the "phpunit" command to "php vendor/bin/phpunit"...
elif [ "$1" == "phpunit" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php vendor/bin/phpunit "$@")
    else
        hub_is_not_running
    fi

# Proxy the "pest" command to "php vendor/bin/pest"...
elif [ "$1" == "pest" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php vendor/bin/pest "$@")
    else
        hub_is_not_running
    fi

# Proxy the "pint" command to "php vendor/bin/pint"...
elif [ "$1" == "pint" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php vendor/bin/pint "$@")
    else
        hub_is_not_running
    fi

# Initiate a Laravel Tinker session within the application container...
elif [ "$1" == "tinker" ] ; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" php artisan tinker)
    else
        hub_is_not_running
    fi

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" node "$@")
    else
        hub_is_not_running
    fi

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" npm "$@")
    else
        hub_is_not_running
    fi

# Proxy NPX commands to the "npx" binary on the application container...
elif [ "$1" == "npx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" npx "$@")
    else
        hub_is_not_running
    fi

# Proxy PNPM commands to the "pnpm" binary on the application container...
elif [ "$1" == "pnpm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pnpm "$@")
    else
        hub_is_not_running
    fi

# Proxy PNPX commands to the "pnpx" binary on the application container...
elif [ "$1" == "pnpx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" pnpx "$@")
    else
        hub_is_not_running
    fi

# Proxy Yarn commands to the "yarn" binary on the application container...
elif [ "$1" == "yarn" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" yarn "$@")
    else
        hub_is_not_running
    fi

# Proxy Bun commands to the "bun" binary on the application container...
elif [ "$1" == "bun" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" bun "$@")
    else
        hub_is_not_running
    fi

# Proxy Bun X commands to the "bunx" binary on the application container...
elif [ "$1" == "bunx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" bunx "$@")
    else
        hub_is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mysql" container...
elif [ "$1" == "mysql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(systemd-hub-mysql bash -c)
        ARGS+=("MYSQL_PWD=\${DB_PASSWORD} mysql -u \${DB_USERNAME} \${DB_DATABASE}")
    else
        hub_is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mariadb" container...
elif [ "$1" == "mariadb" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(systemd-hub-mariadb bash -c)
        ARGS+=("MYSQL_PWD=\${DB_PASSWORD} mariadb -u \${DB_USERNAME} \${DB_DATABASE}")
    else
        hub_is_not_running
    fi

# Initiate a PostgreSQL CLI terminal session within the "pgsql" container...
elif [ "$1" == "psql" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(pgsql bash -c)
        ARGS+=("PGPASSWORD=\${PGPASSWORD} psql -U \${POSTGRES_USER} \${POSTGRES_DB}")
    else
        hub_is_not_running
    fi

# Initiate a Bash shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -it)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" sh "$@")
    else
        hub_is_not_running
    fi

# Initiate a root user Bash shell within the application container...
elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -u root)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=("$APP_SERVICE" sh "$@")
    else
        hub_is_not_running
    fi

# Initiate a Redis CLI terminal session within the "redis" container...
elif [ "$1" == "redis" ] ; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        [ ! -t 0 ] && ARGS+=(-T)
        ARGS+=(redis redis-cli)
    else
        hub_is_not_running
    fi

# Open the site...
elif [ "$1" == "open" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then

        if [[ -n "$APP_PORT" && "$APP_PORT" != "80" ]]; then
            FULL_URL="${APP_URL}:${APP_PORT}"
        else
            FULL_URL="$APP_URL"
        fi

        open "$FULL_URL"

        exit
    else
        hub_is_not_running
    fi

# Pass unknown commands to the "podman" binary...
else
    ARGS+=("$@")
fi

# Run Podman with the defined arguments...
"${PODMAIN[@]}" "${ARGS[@]}"

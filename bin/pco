#!/usr/bin/env sh

UNAMEOUT="$(uname -s)"

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]." >&2

    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  pco COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the podman-compose binary."
    echo
    echo "${YELLOW}podman-compose Commands:${NC}"
    echo "  ${GREEN}pco up${NC}        Start the application"
    echo "  ${GREEN}pco up -d${NC}     Start the application in the background"
    echo "  ${GREEN}pco stop${NC}      Stop the application"
    echo "  ${GREEN}pco restart${NC}   Restart the application"
    echo "  ${GREEN}pco ps${NC}        Display the status of all containers"
    echo
    echo "${YELLOW}Artisan Commands:${NC}"
    echo "  ${GREEN}pco artisan ...${NC}          Run an Artisan command"
    echo "  ${GREEN}pco artisan queue:work${NC}"
    echo
    echo "${YELLOW}PHP Commands:${NC}"
    echo "  ${GREEN}pco php ...${NC}   Run a snippet of PHP code"
    echo "  ${GREEN}pco php -v${NC}"
    echo
    echo "${YELLOW}Composer Commands:${NC}"
    echo "  ${GREEN}pco composer ...${NC}                       Run a Composer command"
    echo "  ${GREEN}pco composer require laravel/sanctum${NC}"
    echo
    echo "${YELLOW}Node Commands:${NC}"
    echo "  ${GREEN}pco node ...${NC}         Run a Node command"
    echo "  ${GREEN}pco node --version${NC}"
    echo
    echo "${YELLOW}NPM Commands:${NC}"
    echo "  ${GREEN}pco npm ...${NC}        Run a npm command"
    echo "  ${GREEN}pco npx${NC}            Run a npx command"
    echo "  ${GREEN}pco npm run prod${NC}"
    echo
    echo "${YELLOW}Database Commands:${NC}"
    echo "  ${GREEN}pco mariadb${NC}   Start a MySQL CLI session within the 'mariadb' container"
    echo "  ${GREEN}pco redis${NC}     Start a Redis CLI session within the 'redis' container"
    echo
    echo "${YELLOW}Debugging:${NC}"
    echo "  ${GREEN}pco debug ...${NC}          Run an Artisan command in debug mode"
    echo "  ${GREEN}pco debug queue:work${NC}"
    echo
    echo "${YELLOW}Running Tests:${NC}"
    echo "  ${GREEN}pco test${NC}          Run the tests via the Artisan test command"
    echo "  ${GREEN}pco pest ...${NC}      Run Pest"
    echo "  ${GREEN}pco pint ...${NC}      Run Pint"
    echo "  ${GREEN}pco dusk${NC}          Run the Dusk tests (Requires the laravel/dusk package)"
    echo "  ${GREEN}pco dusk:fails${NC}    Re-run previously failed Dusk tests (Requires the laravel/dusk package)"
    echo
    echo "${YELLOW}Container CLI:${NC}"
    echo "  ${GREEN}pco shell${NC}        Start a pco session within the application container"
    echo "  ${GREEN}pco sh${NC}           Alias for 'pco shell'"
    echo "  ${GREEN}pco root-shell${NC}   Start a root pco session within the application container"
    echo "  ${GREEN}pco root-bash${NC}    Alias for 'pco root-shell'"
    echo "  ${GREEN}pco tinker${NC}       Start a new Laravel Tinker session"
    echo
    echo "${YELLOW}Binaries:${NC}"
    echo "  ${GREEN}pco bin ...${NC}   Run Composer binary scripts from the vendor/bin directory"
    echo
    echo "${YELLOW}Customization:${NC}"
    echo "  ${GREEN}pco build --no-cache${NC}       Rebuild all of the containers"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ ! -z "$APP_ENV" ] && [ -f ./.env.$APP_ENV ]; then
  source ./.env.$APP_ENV;
elif [ -f ./.env ]; then
  source ./.env;
fi

# Define environment variables...
export APP_SERVICE=${APP_SERVICE:-"app"}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWUSER:-$GID}
export PODMAN_FILES=${PODMAN_FILES:-""}

# Function that outputs if not running...
function is_not_running {
    echo "${BOLD}Podman is not running.${NC}" >&2
    echo "" >&2
    echo "${BOLD}You may use the following commands:${NC} 'pco up' or 'pco up -d'" >&2

    exit 1
}

# Define Podman Compose command prefix...
podman compose &> /dev/null
if [ $? == 0 ]; then
    PODMAN_COMPOSE=(podman compose)
else
    PODMAN_COMPOSE=(podman-compose)
fi

if [ -n "$PODMAN_FILES" ]; then
    # Convert PODMAN_FILES to an array...
    IFS=':' read -ra PODMAN_FILES <<< "$PODMAN_FILES"

    for FILE in "${PODMAN_FILES[@]}"; do
        if [ -f "$FILE" ]; then
            PODMAN_COMPOSE+=(-f "$FILE")
        else
            echo "${BOLD}Unable to find Podman Compose file: '${FILE}'${NC}" >&2

            exit 1
        fi
    done
fi

EXEC="yes"

if [ -z "$SKIP_CHECKS" ]; then
    # Ensure that Podman is running...
    if ! podman info > /dev/null 2>&1; then
        echo "${BOLD}Podman is not running.${NC}" >&2

        exit 1
    fi
fi

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" "php" "$@")
    else
        is_not_running
    fi

# Proxy vendor binary commands on the application container...
elif [ "$1" == "bin" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" ./vendor/bin/"$@")
    else
        is_not_running
    fi

# Proxy podman-compose commands to the podman-compose binary on the application container...
elif [ "$1" == "podman-compose" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" "${PODMAN_COMPOSE[@]}")
    else
        is_not_running
    fi

# Proxy Composer commands to the "composer" binary on the application container...
elif [ "$1" == "composer" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" "composer" "$@")
    else
        is_not_running
    fi

# Proxy Artisan commands to the "artisan" binary on the application container...
elif [ "$1" == "artisan" ] || [ "$1" == "art" ] || [ "$1" == "a" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" php artisan "$@")
    else
        is_not_running
    fi

# Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
elif [ "$1" == "debug" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec -e XDEBUG_SESSION=1)
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" php artisan "$@")
    else
        is_not_running
    fi

# Proxy the "test" command to the "php artisan test" Artisan command...
elif [ "$1" == "test" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" php artisan test "$@")
    else
        is_not_running
    fi

# Proxy the "pest" command to "php vendor/bin/pest"...
elif [ "$1" == "pest" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" php vendor/bin/pest "$@")
    else
        is_not_running
    fi

# Proxy the "pint" command to "php vendor/bin/pint"...
elif [ "$1" == "pint" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" php vendor/bin/pint "$@")
    else
        is_not_running
    fi

# Proxy the "dusk" command to the "php artisan dusk" Artisan command...
elif [ "$1" == "dusk" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=(-e "APP_URL=http://${APP_SERVICE}")
        ARGS+=(-e "DUSK_DRIVER_URL=http://selenium:4444/wd/pco")
        ARGS+=("$APP_SERVICE" php artisan dusk "$@")
    else
        is_not_running
    fi

# Proxy the "dusk:fails" command to the "php artisan dusk:fails" Artisan command...
elif [ "$1" == "dusk:fails" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=(-e "APP_URL=http://${APP_SERVICE}")
        ARGS+=(-e "DUSK_DRIVER_URL=http://selenium:4444/wd/pco")
        ARGS+=("$APP_SERVICE" php artisan dusk:fails "$@")
    else
        is_not_running
    fi

# Initiate a Laravel Tinker session within the application container...
elif [ "$1" == "tinker" ] ; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" php artisan tinker)
    else
        is_not_running
    fi

# Proxy Node commands to the "node" binary on the application container...
elif [ "$1" == "node" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" node "$@")
    else
        is_not_running
    fi

# Proxy NPM commands to the "npm" binary on the application container...
elif [ "$1" == "npm" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" npm "$@")
    else
        is_not_running
    fi

# Proxy NPX commands to the "npx" binary on the application container...
elif [ "$1" == "npx" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" npx "$@")
    else
        is_not_running
    fi

# Initiate a MySQL CLI terminal session within the "mariadb" container...
elif [ "$1" == "mariadb" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=(mariadb sh -c)
        ARGS+=("MYSQL_PWD=\${DB_USER} mysql -u \${DB_USER} \${DB_DATABASE}")
    else
        is_not_running
    fi

# Initiate a shell within the application container...
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" sh "$@")
    else
        is_not_running
    fi

# Initiate a root user shell within the application container...
elif [ "$1" == "root-shell" ] || [ "$1" == "root-bash" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=("$APP_SERVICE" sh "$@")
    else
        is_not_running
    fi

# Initiate a Redis CLI terminal session within the "redis" container...
elif [ "$1" == "redis" ] ; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
        ARGS+=(exec)
        ARGS+=(redis redis-cli)
    else
        is_not_running
    fi

# Pass unknown commands to the "podman-compose" binary...
else
    ARGS+=("$@")
fi

# Run Podman Compose with the defined arguments...
"${PODMAN_COMPOSE[@]}" "${ARGS[@]}"
